import pygame

# Initialize Pygame
pygame.init()

# Set the window size
WINDOW_SIZE = (400, 400)

# Create the window
screen = pygame.display.set_mode(WINDOW_SIZE)

# Set the window title
pygame.display.set_caption('Tic-Tac-Toe')

# Set the font for the text
font = pygame.font.Font('freesansbold.ttf', 32)

# Set the colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Set the size of each cell in the grid
CELL_SIZE = WINDOW_SIZE[0] // 3

# Set the margin between cells
MARGIN = 10

# Set the padding around the text
PADDING = 20

# Set the width of the grid lines
GRID_WIDTH = 2

# Set the player symbols
X = 'X'
O = 'O'

# Set the starting player
current_player = X

# Set the board
board = [[' ' for _ in range(3)] for _ in range(3)]

def draw_board():
  # Draw the grid lines
  for i in range(1, 3):
    pygame.draw.line(screen, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, WINDOW_SIZE[1]), GRID_WIDTH)
    pygame.draw.line(screen, BLACK, (0, i * CELL_SIZE), (WINDOW_SIZE[0], i * CELL_SIZE), GRID_WIDTH)
  # Draw the symbols
  for i in range(3):
    for j in range(3):
      if board[i][j] == X:
        draw_x(i, j)
      elif board[i][j] == O:
        draw_o(i, j)

def draw_x(row, col):
  # Calculate the top left corner of the cell
  x = col * CELL_SIZE + MARGIN
  y = row * CELL_SIZE + MARGIN
  # Draw the X
  pygame.draw.line(screen, BLACK, (x, y), (x + CELL_SIZE - 2 * MARGIN, y + CELL_SIZE - 2 * MARGIN), GRID_WIDTH)
  pygame.draw.line(screen, BLACK, (x + CELL_SIZE - 2 * MARGIN, y), (x, y + CELL_SIZE - 2 * MARGIN), GRID_WIDTH)

def draw_o(row, col):
  # Calculate the center of the cell
  x = (col + 0.5) * CELL_SIZE
  y = (row + 0.5) * CELL_SIZE
  # Calculate the radius of the O
  r = (CELL_SIZE - 2 * MARGIN) / 2
  # Draw the O
  pygame.draw.circle(screen, BLACK, (int(x), int(y)), int(r), GRID_WIDTH)

def get_move(player):
  # Get the mouse position
  mouse_x, mouse_y = pygame.mouse.get_pos()
  # Calculate the row and column of the cell that was clicked
  row = mouse_y // CELL_SIZE
  col = mouse_x // CELL_SIZE
  # Check if the cell is empty
  if board[row][col] == ' ':
    # Place the symbol on the board
    board[row][col] = player
    return True
  return False

def has_won(player):
  # check rows
  for row in board:
    if row == [player, player, player]:
      draw_win_message(player, font)
      return True
  # check columns
  for col in range(3):
    if board[0][col] == player and board[1][col] == player and board[2][col] == player:
      draw_win_message(player, font)
      return True
  # check diagonals
  if board[0][0] == player and board[1][1] == player and board[2][2] == player:
    draw_win_message(player, font)
    return True
  if board[0][2] == player and board[1][1] == player and board[2][0] == player:
    draw_win_message(player, font)
    return True
  return False


def draw_win_message(player, font):
  # Create the win message text
  win_message = font.render(f"{player} has won!", True, BLACK, WHITE)
  win_message_rect = win_message.get_rect()
  # Center the message on the screen
  win_message_rect.center = (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] // 2)
  # Draw the message on the screen
  screen.blit(win_message, win_message_rect)
  # Update the display
  pygame.display.update()



def main():
  current_player = X
  # Run the game loop
  running = True
  while running:
    # Handle events
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        running = False
      elif event.type == pygame.MOUSEBUTTONUP:
        # Get the move and switch players if it was successful
        if get_move(current_player):
          if has_won(current_player):
            # Display a win message
            running = False
          else:
            current_player = O if current_player == X else X
    # Draw the board
    screen.fill(WHITE)
    draw_board()
    # Update the display
    pygame.display.update()



main()

# Quit Pygame
pygame.quit()
